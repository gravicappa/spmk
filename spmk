#!/usr/bin/env rc

spmk_inc=$HOME/dev/spmk/
spmk_mk_d=$HOME/dev/spmk/spmk.d
spmk_privkey=$HOME/dev/spmk/priv.key
root=$HOME/dev/spmk/root
pkgdb=$root/var/lib/spmk
ports=$root/usr/ports
pkgdest=$ports
buildroot=$root/tmp/build
sudo=sudo
test -n $"arch || arch=`{uname -m}

fn pkgfilename {echo $target-$arch.pkg.tar.gz}
fn msg {echo '#' $target: $* >[1=2]}

fn die {
  echo $1 >[1=2]
  exit 1
}

fn download {
  # usage: download url [filename]
  filename=$2
  if (test -z $"filename)
    filename=`{basename $1}
  if (! test -f $"filename)
    wget -c --no-check-certificate -O $"filename $1
  if not true
}

fn download_git {
  # usage: download_git repo [dir [tag]]
  test $#2 -ne 0 && dir=$2 || dir=`{basename $1}
  if (test -d $dir)
    @{cd $dir && git pull origin}
  if not
    git clone $1 $dir
  rm -rf $dir-build
  git clone $dir $dir-build
  if (test $#3 -ne 0)
    @{cd $dir-build && git checkout $3}
  if not true
}

fn download_hg {
  # usage: download_hg repo [dir [tag]]
  test $#2 -ne 0 && dir=$2 || dir=`{basename $1}
  if (test -d $dir)
    @{cd $dir && hg pull -u}
  if not
    hg clone $1 $dir
  rm -rf $dir-build
  cp -r $dir $dir-build
  if (test $#3 -ne 0)
    @{cd $dir-build && hg checkout $3}
  if not true
}

fn verifysrc {
  if (! ~ $2 `{sha1sum $1 | awk '{print $1}'})
    die 'Wrong checksum for '^$1
}

fn mkpkg {
  s=$status
  if (~ $s '') {
    f=`{pkgfilename}
    spmk_pkg $pkgdir $"prereq $pkgdest/$"f
    if (test -f $spmk_privkey)
      openssl dgst -sha1 -sign $spmk_privkey <$pkgdest/$"f >$pkgdest/$"f.sig
    if not
      msg 'Warning: cannot sign package '^$pkgdest/$"f
    $sudo sp -a $pkgdest/$"f
  }
  exit $s
}

fn __PACKAGE__ {
  test -e $target && exit 0
  portdir=`{dirname $portfile}
  pkgname=`{echo $target | sed 's/-[0-9].*$//'}
  pkgverrel=`{echo $target | sed s/'^'$pkgname-//}
  pkgver=`{echo $pkgverrel | sed 's/-[0-9]*$//'}
  pkgroot=$buildroot/$pkgname
  pkgdir=$pkgroot/pkg
  for (s in $arch any)
    f='' {
      f=`{arch=$s pkgfilename}
      if (test -f $pkgdest/$"f)
        $sudo sp -a $pkgdest/$"f && exit 0
    }
  if (! ~ ' '^$"MKARGS^' ' *' '^$pkgname^' '*)
    reason=dependency
  if (test -n $"REASON)
    reason=$REASON

  rm -rf $pkgdir
  mkdir -p $pkgroot $pkgdir
  cd $pkgroot

  fn sigexit {mkpkg}
}

fn fixver {
  awk '/^[^ \t][^''=:%]*-[0-9][^''=:%]*:/ {
         p = $0
         sub(/:.*$/, "", p)
         t = p
         sub(/-[0-9].*$/, "", t)
         print t ":QV:" p
       }
       {print}'
}

fn mkports {
  awk 'BEGIN {print "MKSHELL=rc\n.pre:VQ:\n  exit\n.post:VQ:\n  exit\n"}
       /^[ \t]*__PACKAGE__[ \t]*$/ {print "  portfile=''" FILENAME "''"}
       {print}
       END {print "<|cat $spmk_mk_d/*.mk"}' $ports/*/*/build.mk $* | fixver
}

fn mkrevdep {
  awk -F: 'BEGIN {print "MKSHELL=rc\n%:Q:\n  echo $target\n\n"}
           /^[^ \t][^''=%:]*:/ {
             sub(/:[A-Z]+:/, ":")
             sub(/^[ \t]*/, "", $2)
             if (length($2) > 0)
               print $2 ":VQ: " $1
           }' $ports/*/*/build.mk | fixver
}

fn mkdep {
  awk 'BEGIN {print "MKSHELL=rc\n"}
       /^[^ \t][^''=:%]*:/ {sub(/:[A-Z]*:*/, ":VQ:")}
       /^[ \t]*__PACKAGE__[ \t]*$/ {print "  echo \$target; exit 0"}
       {print}' $ports/*/*/build.mk | fixver
}

cmd=$1
if (~ $cmd -*)
  shift
switch ($cmd) {
case ''
  test -f build.mk || die 'no build.mk'
  dir=`{pwd}
  cd $pkgdb
  exec mk -f <{mkports $"dir/build.mk} .pre `{basename $dir} .post
case -b
  cd $pkgdb
  exec mk -f <{mkports} .pre $* .post
case -r
  exec sp -r <{mk -f <{mkrevdep} $* | grep -v '[-][0-9]'}
case -d
  exec mk -f <{mkdep} $*
case -rd
  mk -f <{mkrevdep} $* | grep -v '[-][0-9]'
case -u
  die 'TODO: update whole system'
case *
  echo 'Usage: spmk [-b|-a|-r|-d|-rd|-u] packages...'
  exit 1
}
