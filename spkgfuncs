fn msg {
  echo '=' $target: $* >[1=2]
}

fn die {
  echo '!' $target: error: $* >[1=2]
  exit 1
}

fn sort_ver {
  sort -t. -k1,1n -k2,2n -k3,3n -k4,4n -k5,5n
}

fn find_all_ver {
  echo $version
  for (p in $name-*)
    test -e $p && echo $p | sed s/$name-//
}

fn download {
	echo downloading $1 to $2
  file=$2
  if (test -z $file)
    file=`{basename $1}
  test -f $file || wget $url -O $file
}

fn verifypkg {
  msg checking
  if (test -f $ports/$name/sig) {
    {
      while (line=`{read}) {
        sum=`{echo $line | cut -d' ' -f1}
        file=`{echo $line | cut -d' ' -f2-}
        realsum=`{sha1sum $ports/$name/$file | cut -d' ' -f1}
        if (! ~ $sum $realsum)
          die $file wrong checksum
      }
    } < $ports/$name/sig
  }
  if not
    msg warning: no signature
}

fn as_root {
	#echo as root: $"* >[1=2]
  rc -c $"*
  #sudo rc -c $"*
}

fn register_pkg {
  srcdir=$1
  filelst=$2
  as_root mkdir -p $dbroot/$target
  {
    printf 'reason: %s\n' $reason

    # TODO: use more precise method of size calculation
    printf 'size_kb: '
    du -sk $srcdir | cut -d'	' -f1
  } | as_root cat '>' $dbroot/$target/desc
  as_root cat '<' $filelst '>' $dbroot/$target/files
  {
    for (p in $prereq) {
      echo $p
      pkg=$dbroot/$p-*
      if (test -d $pkg(1))
        if (! grep $name $pkg(1)/required_by >/dev/null >[2=1])
          echo $name | as_root cat '>>' $pkg(1)^/required_by
    }
  } | as_root cat '>' $dbroot/$target/deps
	true
}

fn files_exist_in_dst {
  filelst=$1
  dstdir=$2
  s=0
  {
    while (file=`{read})
      if (test -f $root/$file) {
        msg File $root/$file already exists.
        s=1
      }
  } < $filelst
	echo $s
}


fn remove_files {
  dstdir=$1
  filelst=$2
  {
    while (file=`{read})
      if (! echo $file | grep '/$' >/dev/null >[2=1])
        as_root rm -f $dstdir/$file
  } < $filelst
  {
    while (file=`{read})
      if (echo $file | grep '/$' >/dev/null >[2=1])
        as_root rmdir $dstdir/$file >[2]/dev/null || true
  } < $filelst
}

fn install_files {
  srcdir=$1
  filelst=$2
  dstdir=$3
  s=ok

  if (~ `{files_exist_in_dst $filelst $dstdir} 1)
		false
  if not
    if (! @{cd $srcdir && as_root tar cp .} | @{cd $dstdir && as_root tar x})
      s=err
  if (~ $s err) {
		msg error occured. removing files
    remove_files $dstdir $filelst
    false
  }
	true
}

fn list_files {
  @{
    dir=''
    if (test $#* -gt 1)
      dir=$2
    cd $1
    for (f in *) {
      if (test -d $f) {
        echo $dir$f/
        list_files $f $dir$f/
      }
      if not
        echo $dir$f
    }
  }
}
